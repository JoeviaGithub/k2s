/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2015 Kurento (http://kurento.org/)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Event fired when a data channel is closed.
 *
 * @event module:elements#DataChannelClose
 *
 * @type {module:elements#event:Media}
 *
 * @property {external:Integer} channelId
 *  The channel identifier
 */

/**
 * Event fired when a new data channel is created.
 *
 * @event module:elements#DataChannelOpen
 *
 * @type {module:elements#event:Media}
 *
 * @property {external:Integer} channelId
 *  The channel identifier
 */

/**
 * Event raised when the stream that the element sends out is finished.
 *
 * @event module:elements#EndOfStream
 */

/**
 * Notifies a new local candidate. These candidates should be sent to the remote
 *
 * @event module:elements#IceCandidateFound
 *
 * @type {module:elements#event:Media}
 *
 * @property {module:elements/complexTypes.IceCandidate} candidate
 *  New local candidate
 */

/**
 * Event fired when and ICE component state changes. See 
 * :rom:cls:`IceComponentState` for a list of possible states.
 *
 * @event module:elements#IceComponentStateChange
 *
 * @type {module:elements#event:Media}
 *
 * @property {external:Integer} streamId
 *  The ID of the stream
 * @property {external:Integer} componentId
 *  The ID of the component
 * @property {module:elements/complexTypes.IceComponentState} state
 *  The state of the component
 */

/**
 * Event fired when al ICE candidates have been gathered.
 *
 * @event module:elements#IceGatheringDone
 */

/**
 * Event fired when a new pair of ICE candidates is used by the ICE library. 
 * This could also happen in the middle of a session, though not likely.
 *
 * @event module:elements#NewCandidatePairSelected
 *
 * @type {module:elements#event:Media}
 *
 * @property {module:elements/complexTypes.IceCandidatePair} candidatePair
 *  The new pair of candidates
 */

/**
 * @deprecated</br>Event fired when a data channel is closed.
 *
 * @event module:elements#OnDataChannelClosed
 *
 * @type {module:elements#event:Media}
 *
 * @property {external:Integer} channelId
 *  The channel identifier
 */

/**
 * @deprecated</br>Event fired when a new data channel is created.
 *
 * @event module:elements#OnDataChannelOpened
 *
 * @type {module:elements#event:Media}
 *
 * @property {external:Integer} channelId
 *  The channel identifier
 */

/**
 * @deprecated</br>Notifies a new local candidate. These candidates should be 
 * sent to the remote peer, to complete the ICE negotiation process.
 *
 * @event module:elements#OnIceCandidate
 *
 * @type {module:elements#event:Media}
 *
 * @property {module:elements/complexTypes.IceCandidate} candidate
 *  New local candidate
 */

/**
 * @deprecated</br>Event fired when and ICE component state changes. See 
 * :rom:cls:`IceComponentState` for a list of possible states.
 *
 * @event module:elements#OnIceComponentStateChanged
 *
 * @type {module:elements#event:Media}
 *
 * @property {external:Integer} streamId
 *  The ID of the stream
 * @property {external:Integer} componentId
 *  The ID of the component
 * @property {module:elements/complexTypes.IceComponentState} state
 *  The state of the component
 */

/**
 * @deprecated</br>Event fired when al ICE candidates have been gathered.
 *
 * @event module:elements#OnIceGatheringDone
 */

/**
 * Fired when encryption is used and any stream reached the soft key usage 
 * limit, which means it will expire soon.
 *
 * @event module:elements#OnKeySoftLimit
 *
 * @type {module:elements#event:Media}
 *
 * @property {external:MediaType} mediaType
 *  The media stream
 */

/**
 * @deprecated</br>Fired when the recorder goes to pause state
 *
 * @event module:elements#Paused
 */

/**
 * Fired when the recoding effectively starts. ie: Media is received by the 
 * recorder and record method has been called.
 *
 * @event module:elements#Recording
 */

/**
 * @deprecated</br>Fired when the recorder has been stopped and all the media 
 * has been written to storage.
 *
 * @event module:elements#Stopped
 */
